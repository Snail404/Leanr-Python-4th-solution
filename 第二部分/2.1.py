2 ** 16 ;                                                           #2的16平方，这个不用多说
2/5, 2/5.0 ;                                                        #我使用的版本是python3.6,所以是真除法，无论无何都会保留小数，所以结果自然不必多说

"spam" + "eggs" ;                                                   #十分简单，两个字符串合并，在交互模式下工作，会立即显示两个合并后的结果
S = "ham" ;                                                         #十分简单，定义一个变量，记住哦，在Python里，变量是指引出来的哦。
"eggs" + S ;                                                        #两个加在一起，交互模式下立即显示
S * 5 ;                                                             #将S这个变量重复5次，十分好理解
S[:0] ;                                                             #不显示任何东西，因为后一个索引指到0了，而第一个就是0了
"green %s and %s" % ("eggs", S) ;                                   #内部%格式化
'green {0} and {1}'.format('eggs', S) ;                             #使用format方法格式化

('x',)[0] ;                                                         #定义一个元组，然后显示第一个元组元素，也就是我们刚刚定义好的x
('x','y')[1] ;                                                      #定义一个元组，然后显示第二个元组元素，也就是y

L = [1,2,3] + [4,5,6] ;                                             #制造一个变量名字叫做L，指向两个列表的合体版本
L, L[:], L[:0], L[-2], L[-2:] ;                                     #打印各种L的版本，第一个是全部；第二个是缺省，也就是全部；第三个什么都没有，原因上面有解释过；第四个显示倒数第二个；第四个显示倒数第二个以后的东西，包括倒数第二个
([1,2,3]+[4,5,6])[2:4] ;                                            #定义一个元组，用分片取出它们的一部分
[L[2],L[3]] ;                                                       #制造一个全新的元组，由L的第三个组成和L的第4个组成            
L.reverse();L ;                                                     #用内部方法把L用排序算法扭转过来，然后显示出L（交互模式下）   
L.sort();L ;                                                        #同上，不过是缺省排序算法排序L
L.index(4) ;                                                        #在交互模式下，用index方法告诉我们4的位置在哪里，以偏置的形式

{'a':1, 'b':2}['b'] ;                                               #制造一个字典，然后告诉我们b里面有什么（交互模式下）
D = {'x':1, 'y':2, 'z':3} ;                                         #制作一个变量D，不过指向一个字典
D['w'] = 0 ;                                                        #因为字典是可变的，这里的操作实际上是增加了一个新的w的键
D['x'] + D['w'] ;                                                   #这里抽出各自的值，来进行计算，交互模式下，计算的结果为1
D[(1,2,3)] = 4 ;                                                    #别看这里有元组，实际上它是键来的，值是4
list(D.keys()), list(D.values()), (1,2,3) in D ;                    #交互模式下，用list函数分别进行抽取键和值，然后in是检测这个是否在D里面
[[]], ["",[],(),{},None] ;                                          #创造一堆空东西，就这样，恩。
